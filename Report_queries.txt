QUERIES

Login

To Login the only thing necessary is to do is compare the password that is registred under the UserID that is inputted, with the inputted password by the user. So to extract that registred password it's just needed the following:

%POR QUERY

%Select pass
%from User_
%where UserID='inputted password'


Search Results

To search companies we want to select the companies that verify the conditions that come from the filters. Out of those we want to show the name (Name_company), the average score (Av_score), the zone (Zone), the dimension (Dim) and the sector (Sector).
Since not every filter option has necessarily an input from the user (non-filtered), the query changes acording to that. For the numerical parameters we consider them 0 when that happens, which doesn't require changing the query. 
When it's something like zone (same for dimension, sector) and the user has a preference, the program has a \textit{if} constraint that adds \textit{" AND Zone='inputted zone by user'"} to query.

%Select Company Name, General_info, Contact_info, Av_score, Zone, Dim, Sector
%From Company
%Where Av_score >= inputted_Av_score AND Av_salary >= inputted_Av_salary ...


Show Company Info and Scores

If the user wishes to know more about one company besides what \textit{Search Results} query shows, mainly all the scores and contact info, then the query for that consists on selecting every atribute of the chosen company, besides the ID.

%POR QUERY

Verify User Type

To check what type a user is after the Login, in order to grant him access to what he should have access to, two queries are made. 
To check if he is an Student it's done the following.

%select StudentID
%from Student
%where StudentID='inputted ID'

If he's not a student we then check if he is a member of organization and find out what type of clearance he has.

%select OrganizationID, Clearance
%from Organization
%where OrganizationID='inputted ID'

If nothing comes out of this query, thenn the user is an Alumni.


Evaluate

In order for an alumni to evaluate a company he first should select out of the existing companies in the database which on he will evaluate.
Then store what how he scored the company in the \textit{Evaluate} table.

% insert into Evaluate values (AlumniID, CompanyID, Av_score, Av_salary, Effect_hours, Work_env, Discrimination, Career_opportunity, Schedule_flex)*

*All these values are inputted values by the alumni, except for the AlumniID and CompanyID which come directly from the program.

The program then calculates the new scores and those will be updated in the database


% Update Company
% set Number_eval=Number_eval+1
% set Av_score="new Av_score"
	.
	.
	.
% where CompanyID="ID of chosen company"



Change Company Info

If an organiazation member wants to modify some info about the company the query to do so is the following.
Assuming he wants to change the contact

%Uptdate Company
%set contact_info="input_contact"
%where companyID="ID of chosen company"

% Insert into Manages values (UserID, CompanyID, vector of atributes changed*, time of change)

*[hiring, contact_info, general_info], 1 if it changed, 0 if not.


Add New Company to Database

If an alumni wishes to add a new company to the database, in order to evaluate it, they can do so. This is simply adding a new entry to the table \textit{Company}.
When doing so, the fields corresponding to zone, dimension, sector, hiring, contact info and general info do not necessarly need to have an input. The ID is generated by the database and the other ones need initial inputs.


%select CompanyID
%from Company
%order by CompanyID

This then goes to the program that takes the last values of this array and returns it to the database (\textit{Last ID}).

% Insert into Company values (\textit{Last ID}+1, 'Name_company', 0, 'zone','dim','sector','hiring','Contact_info','General_info',Av_score, Av_salary, Effect_hours, Work_env, Discrimination, Career_opportunity, Schedule_flex)

















